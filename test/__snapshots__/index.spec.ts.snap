// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator generates the same code as yesterday with warnings 1`] = `"{\\"guards\\":[\\"\\\\n// generated typeguard for Foo\\\\nexport const isFoo = (maybeFoo: any): maybeFoo is Foo => {\\\\n    const {name, value, amount, more, muchMore} = maybeFoo;\\\\n\\\\n    return ((name) => {\\\\n        const nameChecksOut = name === 'foo' /* name: 'foo'*/;\\\\n        if(!nameChecksOut) {console.warn(\\\\\\"name is not a propper 'foo'\\\\\\")}\\\\n        return nameChecksOut;\\\\n        })(name) &&\\\\n        ((value) => {\\\\n        const valueChecksOut = typeof value === 'string' /* value: string*/;\\\\n        if(!valueChecksOut) {console.warn(\\\\\\"value is not a propper string\\\\\\")}\\\\n        return valueChecksOut;\\\\n        })(value) &&\\\\n        ((amount) => {\\\\n        const amountChecksOut = !(amount) || typeof amount === 'number' /* amount: number?*/;\\\\n        if(!amountChecksOut) {console.warn(\\\\\\"amount is not a propper number\\\\\\")}\\\\n        return amountChecksOut;\\\\n        })(amount) &&\\\\n        ((more) => {\\\\n        const moreChecksOut = typeof more === 'object' /* more: object*/;\\\\n        if(!moreChecksOut) {console.warn(\\\\\\"more is not a propper object\\\\\\")}\\\\n        return moreChecksOut;\\\\n        })(more) &&\\\\n        ((muchMore) => {\\\\n        const muchMoreChecksOut = true /* muchMore: any*/;\\\\n        if(!muchMoreChecksOut) {console.warn(\\\\\\"muchMore is not a propper any\\\\\\")}\\\\n        return muchMoreChecksOut;\\\\n        })(muchMore);\\\\n};\\\\n\\\\n\\",\\"\\\\n// generated typeguard for Bar\\\\nexport const isBar = (maybeBar: any): maybeBar is Bar => {\\\\n    const {name, list, maybesomething} = maybeBar;\\\\n\\\\n    return ((name) => {\\\\n        const nameChecksOut = name === 'bar' /* name: 'bar'*/;\\\\n        if(!nameChecksOut) {console.warn(\\\\\\"name is not a propper 'bar'\\\\\\")}\\\\n        return nameChecksOut;\\\\n        })(name) &&\\\\n        ((list) => {\\\\n        const listChecksOut = (Array.isArray(list) && list.every((x) => typeof x === 'number')) /* list: Array<number>*/;\\\\n        if(!listChecksOut) {console.warn(\\\\\\"list is not a propper Array<number>\\\\\\")}\\\\n        return listChecksOut;\\\\n        })(list) &&\\\\n        ((maybesomething) => {\\\\n        const maybesomethingChecksOut = (maybesomething === 'something' || maybesomething === 'nothing') /* maybesomething: 'something' | 'nothing'*/;\\\\n        if(!maybesomethingChecksOut) {console.warn(\\\\\\"maybesomething is not a propper 'something' | 'nothing'\\\\\\")}\\\\n        return maybesomethingChecksOut;\\\\n        })(maybesomething);\\\\n};\\\\n\\\\n\\",\\"\\\\n// generated typeguard for Direction\\\\nexport const isDirection = (maybeDirection: any): maybeDirection is Direction =>\\\\n    (maybeDirection === 'up' || maybeDirection === 'down');\\",\\"\\\\n// generated typeguard for FooOrBar\\\\nexport const isFooOrBar = (maybeFooOrBar: any): maybeFooOrBar is FooOrBar =>\\\\n    (isFoo(maybeFooOrBar) || isBar(maybeFooOrBar));\\",\\"\\\\n// generated typeguard for Foobar\\\\nexport const isFoobar = (maybeFoobar: any): maybeFoobar is Foobar => {\\\\n    const {foo, bar, extras, names, direction, directions, numbers, parts} = maybeFoobar;\\\\n\\\\n    return ((foo) => {\\\\n        const fooChecksOut = isFoo(foo) /* foo: Foo*/;\\\\n        if(!fooChecksOut) {console.warn(\\\\\\"foo is not a propper Foo\\\\\\")}\\\\n        return fooChecksOut;\\\\n        })(foo) &&\\\\n        ((bar) => {\\\\n        const barChecksOut = isBar(bar) /* bar: Bar*/;\\\\n        if(!barChecksOut) {console.warn(\\\\\\"bar is not a propper Bar\\\\\\")}\\\\n        return barChecksOut;\\\\n        })(bar) &&\\\\n        ((extras) => {\\\\n        const extrasChecksOut = !(extras) || true /* unimplemented for TypeLiteral \\\\\\"extras\\\\\\" */ /* extras: unhandled typeName(TypeLiteral)?*/;\\\\n        if(!extrasChecksOut) {console.warn(\\\\\\"extras is not a propper unhandled typeName(TypeLiteral)\\\\\\")}\\\\n        return extrasChecksOut;\\\\n        })(extras) &&\\\\n        ((names) => {\\\\n        const namesChecksOut = !(names) || (Array.isArray(names) && names.every((x) => typeof x === 'string')) /* names: Array<string>?*/;\\\\n        if(!namesChecksOut) {console.warn(\\\\\\"names is not a propper Array<string>\\\\\\")}\\\\n        return namesChecksOut;\\\\n        })(names) &&\\\\n        ((direction) => {\\\\n        const directionChecksOut = isDirection(direction) /* direction: Direction*/;\\\\n        if(!directionChecksOut) {console.warn(\\\\\\"direction is not a propper Direction\\\\\\")}\\\\n        return directionChecksOut;\\\\n        })(direction) &&\\\\n        ((directions) => {\\\\n        const directionsChecksOut = (Array.isArray(directions) && directions.every((x) => true /* undefined: Direction*/)) /* directions: Array<Direction>*/;\\\\n        if(!directionsChecksOut) {console.warn(\\\\\\"directions is not a propper Array<Direction>\\\\\\")}\\\\n        return directionsChecksOut;\\\\n        })(directions) &&\\\\n        ((numbers) => {\\\\n        const numbersChecksOut = !(numbers) || (Array.isArray(numbers) && numbers.every((x) => typeof x === 'number')) /* numbers: Array<number>?*/;\\\\n        if(!numbersChecksOut) {console.warn(\\\\\\"numbers is not a propper Array<number>\\\\\\")}\\\\n        return numbersChecksOut;\\\\n        })(numbers) &&\\\\n        ((parts) => {\\\\n        const partsChecksOut = true /* parts: PrivateInterface*/ /* parts: PrivateInterface*/;\\\\n        if(!partsChecksOut) {console.warn(\\\\\\"parts is not a propper PrivateInterface\\\\\\")}\\\\n        return partsChecksOut;\\\\n        })(parts);\\\\n};\\\\n\\\\n\\"]}"`;

exports[`generator generates the same code as yesterday without warnings 1`] = `"{\\"guards\\":[\\"\\\\n// generated typeguard for Foo\\\\nexport const isFoo = (maybeFoo: any): maybeFoo is Foo => {\\\\n    const {name, value, amount, more, muchMore} = maybeFoo;\\\\n\\\\n    return name === 'foo' /* name: 'foo'*/ &&\\\\n        typeof value === 'string' /* value: string*/ &&\\\\n        !(amount) || typeof amount === 'number' /* amount: number?*/ &&\\\\n        typeof more === 'object' /* more: object*/ &&\\\\n        true /* muchMore: any*/;\\\\n};\\\\n\\\\n\\",\\"\\\\n// generated typeguard for Bar\\\\nexport const isBar = (maybeBar: any): maybeBar is Bar => {\\\\n    const {name, list, maybesomething} = maybeBar;\\\\n\\\\n    return name === 'bar' /* name: 'bar'*/ &&\\\\n        (Array.isArray(list) && list.every((x) => typeof x === 'number')) /* list: Array<number>*/ &&\\\\n        (maybesomething === 'something' || maybesomething === 'nothing') /* maybesomething: 'something' | 'nothing'*/;\\\\n};\\\\n\\\\n\\",\\"\\\\n// generated typeguard for Direction\\\\nexport const isDirection = (maybeDirection: any): maybeDirection is Direction =>\\\\n    (maybeDirection === 'up' || maybeDirection === 'down');\\",\\"\\\\n// generated typeguard for FooOrBar\\\\nexport const isFooOrBar = (maybeFooOrBar: any): maybeFooOrBar is FooOrBar =>\\\\n    (isFoo(maybeFooOrBar) || isBar(maybeFooOrBar));\\",\\"\\\\n// generated typeguard for Foobar\\\\nexport const isFoobar = (maybeFoobar: any): maybeFoobar is Foobar => {\\\\n    const {foo, bar, extras, names, direction, directions, numbers, parts} = maybeFoobar;\\\\n\\\\n    return isFoo(foo) /* foo: Foo*/ &&\\\\n        isBar(bar) /* bar: Bar*/ &&\\\\n        !(extras) || true /* unimplemented for TypeLiteral \\\\\\"extras\\\\\\" */ /* extras: unhandled typeName(TypeLiteral)?*/ &&\\\\n        !(names) || (Array.isArray(names) && names.every((x) => typeof x === 'string')) /* names: Array<string>?*/ &&\\\\n        isDirection(direction) /* direction: Direction*/ &&\\\\n        (Array.isArray(directions) && directions.every((x) => true /* undefined: Direction*/)) /* directions: Array<Direction>*/ &&\\\\n        !(numbers) || (Array.isArray(numbers) && numbers.every((x) => typeof x === 'number')) /* numbers: Array<number>?*/ &&\\\\n        true /* parts: PrivateInterface*/ /* parts: PrivateInterface*/;\\\\n};\\\\n\\\\n\\"]}"`;
